GUI
----------------------

UI DIRECTORY
  UI directory contained source code and configure file, included one directory and two file.
    - src (contained all source code)
    - packages.json (information about the project & npm script)
    - webpack.config.js (build configure file)
  after build source code and don't to edit anything. you can remove src, packages.json and webpack.config.js because build file will contained in dist directory, that is.
    - index.html
    - app.js (contained all of javascript that compiled from react and included css that compiled from sass)
    - img (contained all image file)
SRC DIRECTORY
  UI/src directory included seven directory and two file.
    - app (contained main component)
    - config (contained configure file to call python scripts)
    - dashboard (contained all dashboard module)
    - header (header module)
    - img (all of image file)
      - svg file, download here. https://material.io/icons
    - lib (contained third party library)
      - markerclusterer, download here. https://github.com/googlemaps/v3-utility-library/tree/master/markerclusterer
      if you have added new library. you will update "webpack.config.js" file. in array of entry (five line), push new pathe of library. 
    - sass (global style, such as some button color)
    - index.html
    - index.js
COMPONENT & MODULE
    - Now, the system have one component, that is dashboard. it contained many module. basic of module included three file.
      - presentation (html)
      - container (logic. that is all function for that module)
      - style (scss)
    - dependencies (important!)
      some module will work together. so, some function and variable will declare at root of component. in this case we declare in dashboardContainer.js 

Example:
    - how to add new attributes (for example, GPU)
      ===========================
      - search function (search directory)
      ===========================
        - search.js (update html)
          - add new input element to form. below cpu and memory section. (above and first of "<div className={Style.divideblock2}>" element)
            ---------------------------------------------------------
            <div className={Style.row}>
              <div className={Style.block}>
                <div>Attrubute name:</div>
                  <input className={Style.input} type='text' name='ADD--ATTRIBUTE--NAME' onChange={this.props.searchContainer.onResourceChange} value={this.props.searchContainer.state.ADD--ATTRIBUTE--NAME}/>
                </div>
              </div>
            </div>
            ---------------------------------------------------------
        - foundTable.js (update html)
          - add new attribute label to search detail (top of table). in the "<div className={Style.column1}>", add here.
            ---------------------------------------------------------
            <div>
              <span>Attribute name : </span>
              <span className={Style.hilight}>{this.props.searchContainer.state.ADD--ATTRIBUTE--NAME}</span>
            </div>
            ---------------------------------------------------------
          - add new title name of table below "<div className={Style.text}>Available Memory (GB)</div>"
            ---------------------------------------------------------
            <div className={Style.text}>ADD--ATTRIBUTE--NAME</div>
            ---------------------------------------------------------
          - add new element to show data below "<div className={Style.text}>{data.memory.available}</div>"
            ---------------------------------------------------------
            <div className={Style.text}>{data.ADD--ATTRIBUTE--NAME}</div>
            
            when: data... depend on response data from python script.
            ---------------------------------------------------------
        - notFoundTable.js (update html)
          - add add new attribute label to search detail (top of table). in the column1 class name. (as same as foundTable.js)
        - searchContainer.js (update logic)
          - first, add new attribute name to state of variable in constructor method.
            ---------------------------------------------------------
            this.state = {
              ADD--ATTRIBUTE--NAME: '',
              cpu: '',
              mem: '',
              ...
            }
            ---------------------------------------------------------
          - second, update parameter to query in onSearchSubmit method.
            let params = {
              params:{
                resources: ...+','+((this.state.ADD--ATTRIBUTE--NAME=='') ? 0 : this.state.ADD--ATTRIBUTE--NAME),
                ...
              }
            }
            
      ===========================
      - existing reservations & past reservations (history directory)
      ===========================
        - detail.js (update html)
          - add attribute name below "<div className={Style.space}>Memory reserved</div>"
            ---------------------------------------------------------
            <div className={Style.space}>ADD--ATTRIBUTE--NAME</div>
            ---------------------------------------------------------
          - add new data element below "<div className={Style.space}>: {site.memory}</div>"
            ---------------------------------------------------------
            <div className={Style.space}>: {site.ADD--ATTRIBUTE--NAME}</div>

            when: site... depend on response data from python script.
            ---------------------------------------------------------

      ===========================
      - reservation function (reservation directory)
      ===========================
        - step1.js (update html)
          - add new input element below
          <div className={Style.block}>
            <input ref={data.name.toLowerCase().replace(' ','')+'MEM'} ... onChange={this.props.reservationContainer.onEnterMEM}/>
          </div>
          ---------------------------------------------------------
          <div className={Style.block}>
            <span>ADD--ATTRIBUTE--NAME :</span>
          </div>
          <div className={Style.block}>
            <input ref={data.name.toLowerCase().replace(' ','')+'ADD--ATTRIBUTE--NAME'} name={key} value={this.props.reservationContainer.state.ADD--ATTRIBUTE--NAME[key]} className={Style.inputradio} type='text' onChange={this.props.reservationContainer.onEnterADD--ATTRIBUTE--NAME}/>
          </div>
          ---------------------------------------------------------
    
